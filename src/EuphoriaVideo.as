package{	import caurina.transitions.*;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Shape;	import flash.display.SimpleButton;	import flash.display.Sprite;	import flash.display.StageDisplayState;	import flash.display.StageScaleMode;	import flash.events.AsyncErrorEvent;	import flash.events.Event;	import flash.events.FullScreenEvent;	import flash.events.MouseEvent;	import flash.events.NetStatusEvent;	import flash.events.StageVideoAvailabilityEvent;	import flash.events.StageVideoEvent;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.media.StageVideo;	import flash.media.StageVideoAvailability;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.text.*;	import flash.text.AntiAliasType;	import flash.text.Font;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFormatAlign;	import flash.ui.Mouse;	import flash.utils.Timer;	import flash.utils.describeType;

		[SWF(width="856", height="480")]	public class EuphoriaVideo extends Sprite	{		//Are we Full Screen?		private var bFS:Boolean = false;				//Size of Video		private var iStageWidth:int = 856;		private var iStageHeight:int = 480;				private var stageVideoAvail:Boolean;				private var bButtonLoading:Boolean;				//NetStreams to play videos		private var ns1:NetStream;		private var ns2:NetStream;		private var ns3:NetStream;				//NetStreamDuration		private var iFilmDuration:Number;				//StageVideos for hardware accelerated		private var sv1:StageVideo;		private var sv2:StageVideo;		private var sv3:StageVideo;				//Non hardware accelerated video		private var vid1:Video;		private var vid2:Video;		private var vid3:Video;				//Make FullScreen		private var btnResume:Sprite;		private var iResumeX:int;		private var iResumeY:int;		private static const sResumeTitle:String = "CLICK HERE CONTINUE";		private static const sResumeShort:String = "Resume";						//Restart during fullscreen button		private var btnRestartDFScreen:Sprite;		private var iRestartDFSX:int;		private var iRestartDFSY:int;		private static const sRestartDFSTitle:String = "RESTART THE JOURNEY";		private static const sRestartDFSShort:String = "RestartDFS";				//Restart everything button		private var btnRestart:Sprite;		private var iRestartX:int;		private var iRestartY:int;		private var bRestarting:Boolean;		private static const sRestartTitle:String = "CLICK HERE TO BEGIN YOUR JOURNEY";		private static const sRestartShort:String = "Restart";				private var lblChoosePath:Sprite;		private var iChoosePathX:int;		private var iChoosePathY:int;		private static const sChoosePathTitle:String = "CHOOSE YOUR PATH";		private static const sChoosePathShort:String = "ChoosePath";		private var iChoosePathLocation:int;				//Buttons		private var btnButton1:Sprite;		private var btnButton2:Sprite;		private var bButtonActive:Boolean;		private var iButtonFadeAlpha:Number;		private var bShowingButtons:Boolean;		private var uiButtonColour:uint;		private var iButton1Location:int;		private var iButton2Location:int;				//private var oBitmapData:BitmapData;				private var oBitmap1:Bitmap;		private var oBitmap2:Bitmap;				//Text Items for buttons		private var oTextField:TextField;		private var oTextFormat:TextFormat;		private var oTextAlign:TextFormatAlign;					//Name of font that we will use for buttons		private var sFontName:String;				//Faded Screen		private var iFadeAlpha:Number;		private var fadeScreen:Sprite;				//Video Selection Variables		private var iStage:int;		private var sStage:String;		private var iSelection:int;		private var sSelection:String;		private var iNoOfStages:int;		private var iCurrentVideoPlaying:int;		private var bCueingVideo1:Boolean;		//Strings for choosing which video file to load		private var sFile1:String;		private var sFile2:String;		private var sFile3:String;		private var sCurrentQuality:String;		private var sHighQuality:String;		private var sMediumQuality:String;		private var sFileExtension:String;				//XML Config File		private var xml:XML;		private var xmlFile:String = "iMovie.xml";		private var bXMLLoaded:Boolean;				//Mouse Show/Hide items		private var bHidden:Boolean;		private var timer:Timer;		private var iSecondsToWait:int = 1;				public function EuphoriaVideo()		{			bRestarting = false;						//Timer to hide the mouse after a second or so			timer = new Timer(1000);			timer.addEventListener(TimerEvent.TIMER, HideMouseAfterWait);						//That stupid white boarder around fullscreen looks rubbish, we'll turn it black!			stage.color = 0x000000;			//			var FontLibrary:Class = event.//			var FontLibrary:Class = event.target.applicationDomain.getDefinition(TrojanProRegularFont) as Class;//			Font.registerFont(TrajanProRegularFont);						uiButtonColour = 0xFFFFFF;						var iFontFavouriteLevel:int = 0;						var embeddedFonts:Array = Font.enumerateFonts(true);			embeddedFonts.sortOn("fontName", Array.CASEINSENSITIVE);						trace("\n\n----- Enumerate Fonts -----");			for(var i:int = 0; i<embeddedFonts.length; i++) {				trace(embeddedFonts[i].fontName);				if(embeddedFonts[i].fontName == "Trajan Pro")				{					//Will fix the below for Trajan Pro later//					iFontFavouriteLevel = 1;//					sFontName = embeddedFonts[i].fontName;//					break;				}				if(embeddedFonts[i].fontName == "Palatino")				{					if(iFontFavouriteLevel != 1)					{						iFontFavouriteLevel = 2;						sFontName = embeddedFonts[i].fontName;					}									}				if(embeddedFonts[i].fontName == "Verdana")				{					if(iFontFavouriteLevel != 1 && iFontFavouriteLevel != 2)					{						iFontFavouriteLevel = 3;						sFontName = embeddedFonts[i].fontName;					}				}			}			trace("---------------------------\n\n");						//Format the Text of the Text Field			oTextFormat = new TextFormat();			oTextFormat.font  = sFontName;/*sFontName;*/			oTextFormat.color = uiButtonColour;			oTextFormat.size = 20;			oTextFormat.align = TextFormatAlign.CENTER;						//Setup the TextField to Allow our choice of font			oTextField = new TextField();			oTextField.textColor = 0xFFFFFF;			//oTextField.border = true;			oTextField.borderColor = 0xFFFFFF;			oTextField.background = false;			oTextField.tabEnabled = false;			//oTextField.embedFonts = true;			//In order to use any of our truetype fonts that we will embed, we need to enable that option			oTextField.antiAliasType = AntiAliasType.ADVANCED;			oTextField.defaultTextFormat = oTextFormat;			oTextField.sharpness = 400;//			var btnMakeFullScreen:Sprite = new Sprite();//			var sMFS:String = "Make Full Screen";//			//			var aBTN:Array = [];//			aBTN[0] = btnMakeFullScreen;//			//			var asMFS:Array = [];//			asMFS[0] = sFMS;//			//			var btnArray:Array = MakeButtons2(asMFS, aBTN); //			btnMakeFullScreen = btnArray[0];//			btnMakeFullScreen.addEventListener(MouseEvent.CLICK, btnResumeYo, false, 0, true);//						stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenRedraw);						//SETUP FULLSCREEN SWITCHING BUTTONS			//Resume (go back to full screen) when full screen exits			btnResume = new Sprite();			MakeResumeOrRestart(sResumeTitle, sResumeShort);						iResumeX = btnResume.x;			iResumeY = btnResume.y;						btnResume.addEventListener(MouseEvent.ROLL_OVER, btnResumeOver, false, 0, true);			btnResume.addEventListener(MouseEvent.ROLL_OUT, btnResumeOut, false, 0, true);			btnResume.addEventListener(MouseEvent.CLICK, btnResumeClick, false, 0, true);						this.addChild(btnResume);						//Button to allow restarting when the user exits full screen			btnRestartDFScreen = new Sprite();			MakeResumeOrRestart(sRestartDFSTitle, sRestartDFSShort);						iRestartDFSX = btnRestartDFScreen.x;			iRestartDFSY = btnRestartDFScreen.y;						btnRestartDFScreen.addEventListener(MouseEvent.ROLL_OVER, btnRestartOver, false, 0, true);			btnRestartDFScreen.addEventListener(MouseEvent.ROLL_OUT, btnRestartOut, false, 0, true);			btnRestartDFScreen.addEventListener(MouseEvent.CLICK, btnRestartClick, false, 0, true);						this.addChild(btnRestartDFScreen);						//Hide the Restart button			btnRestartDFScreen.x = 856;						//SETUP FINAL RESTART BUTTON			btnRestart = new Sprite();			MakeResumeOrRestart(sRestartTitle, sRestartShort);						iRestartX = btnRestart.x;			iRestartY = btnRestart.y;						btnRestart.addEventListener(MouseEvent.ROLL_OVER, btnRestartOver, false, 0, true);			btnRestart.addEventListener(MouseEvent.ROLL_OUT, btnRestartOut, false, 0, true);			btnRestart.addEventListener(MouseEvent.CLICK, btnRestartClick, false, 0, true);						this.addChild(btnRestart);						//Hide the Restart button			btnRestart.x = 856;						//iStage indicates where we are through the video (At which selection point we are)			iStage = 1;						//Firts Selection point			iSelection = 1;						//Set the first video playing			iCurrentVideoPlaying = 1; 						//Quality related bits			sCurrentQuality = "";			sFileExtension = "";						//Set Screen Fade amount			iFadeAlpha = 0.7;						fadeScreen = new Sprite();			btnButton1 = new Sprite();			btnButton2 = new Sprite();						//We must create these Bitmaps for use later			oBitmap1 = new Bitmap(null);			oBitmap2 = new Bitmap(null);						//Set faded screen to make the video fade			fadeScreen.graphics.beginFill(0x000000, iFadeAlpha);			fadeScreen.graphics.drawRect(0, 0, iStageWidth, iStageHeight);			fadeScreen.graphics.endFill();						//Start with a green sprite to find position			btnButton1.graphics.beginFill(0x00FF00, 1);			btnButton1.graphics.drawRect(50, 50, 100, 100);			btnButton1.graphics.endFill();						//Prepare Button 2 also			btnButton2.graphics.beginFill(0x00FF00, 1);			btnButton2.graphics.drawRect(200, 50, 100, 100);			btnButton2.graphics.endFill();						// then we add the button to stage			this.addChildAt(fadeScreen, 0);			this.addChildAt(btnButton1, 1);			this.addChildAt(btnButton2, 1);						//Enable Sprites as Buttons			btnButton1.buttonMode = true;			btnButton2.buttonMode = true;						//Disable Mouse changes			btnButton1.mouseChildren = false;			btnButton2.mouseChildren = false;						//When the button is clicked, or the mouse scrolls over the button, make it do something			btnButton1.addEventListener(MouseEvent.ROLL_OVER, btnButton1Over, false, 0, true);			btnButton1.addEventListener(MouseEvent.ROLL_OUT, btnButton1Out, false, 0, true);			btnButton1.addEventListener(MouseEvent.CLICK, btnButton1Click, false, 0, true);						//When the button is clicked, or the mouse scrolls over the button, make it do something			btnButton2.addEventListener(MouseEvent.ROLL_OVER, btnButton2Over, false, 0, true);			btnButton2.addEventListener(MouseEvent.ROLL_OUT, btnButton2Out, false, 0, true);			btnButton2.addEventListener(MouseEvent.CLICK, btnButton2Click, false, 0, true);						//We'll hide our buttons for now and disable 'em!			fadeScreen.alpha = 0;			btnButton1.alpha = 0;			btnButton2.alpha = 0;						fadeScreen.x = iStageWidth;			btnButton1.x = iStageWidth;			btnButton2.x = iStageWidth;						//Label to say to choose path			lblChoosePath = new Sprite();			MakeResumeOrRestart(sChoosePathTitle, sChoosePathShort);						iChoosePathX = lblChoosePath.x;			iChoosePathY = lblChoosePath.y;									this.addChild(lblChoosePath);			lblChoosePath.x = iStageWidth;						bButtonActive = false;									//We'll likely have some hot looking HD content, lets make them look nice in full screen			//SwitchFullScreen();					}				//Full screen switching		private function SwitchFullScreen():void		{			//stage.scaleMode = StageScaleMode.NO_SCALE;			//Are we currently full screen?			if (stage.displayState == StageDisplayState.NORMAL)			{				//No, lets do it!				stage.displayState=StageDisplayState.FULL_SCREEN;				ShowMouse(false);						} 			else			{				//Yes, lets go small screen!				stage.displayState=StageDisplayState.NORMAL;			}		}				//So we want to be able to take the user back to fullscreen		private function fullScreenRedraw(event:FullScreenEvent):void		{			if (event.fullScreen == false)			{				bFS = false;				//Check if we are in the process of restarting				if(bRestarting == false)				{					//SwitchFullScreen();					//So the user has switched from full screen. Lets pause everything, and show a button to go Fullscreen.					if(bButtonActive == false)					{						switch(iCurrentVideoPlaying)						{							case 1:								ns1.pause();								break;							case 2:								ns2.pause();								break;							case 3:								ns3.pause();								break;						}											}					else					{						iButton1Location = btnButton1.x;						iButton2Location = btnButton2.x;						iChoosePathLocation = lblChoosePath.x;												btnButton1.x = iStageWidth;						btnButton2.x = iStageWidth;						lblChoosePath.x = iStageWidth;					}										Tweener.addTween(fadeScreen, {alpha:iFadeAlpha, time:3, transition:"easeOutExpo"});					fadeScreen.x = 0;					//Show the button					//				btnResume.x = int((iStageWidth / 16) - (btnResume.width / 2));					//				btnResume.y = int((iStageHeight / 16) - (btnResume.height / 2));					btnResume.x = iResumeX;					btnResume.y = iResumeY;										btnRestartDFScreen.x = iRestartDFSX;					btnRestartDFScreen.y = iRestartDFSY;										//Show the mouse again					ShowMouse(true);									}							}			else			{				bFS = true;			}		}		//Is that cool StageVideo stuff available?		private function OnAvail(e:StageVideoAvailabilityEvent) :void		{			//Do we have Stage Video for the Hardware acceleration of video playback?			stageVideoAvail = (e.availability == StageVideoAvailability.AVAILABLE);			InitVideo();		}				private function InitVideo() :void		{			//Internet Connection needed for streams			var nc:NetConnection = new NetConnection();			nc.connect(null);						//Lets allow streaming!			ns1 = new NetStream(nc);			ns2 = new NetStream(nc);			ns3 = new NetStream(nc);						ns1.client = this;			ns2.client = this;			ns3.client = this;						//We need to know when the videos finish playing so we can do rock n roll cool stuff!			ns1.addEventListener(NetStatusEvent.NET_STATUS, OnStatsVideo1);			ns2.addEventListener(NetStatusEvent.NET_STATUS, OnStatsVideo2and3);			ns3.addEventListener(NetStatusEvent.NET_STATUS, OnStatsVideo2and3);						//Catch and swallow asyncErrors			ns1.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);			ns2.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);			ns3.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);												//So we can listen out for cuepoints in the video (flv) files and act on them, lets allow this!			var oClient:Object = new Object();			oClient.onCuePoint = cuePointHandler;			oClient.onMetaData = metaDataHandler;			//oClient.onMetaData = metaDataHandler;			ns1.client = oClient;			ns2.client = oClient;			ns3.client = oClient;			//ns1.client={onMetaData:function(obj:Object):void{} };						/*			//Add more cue point awareness			var oClient2:Object = new Object();			oClient2.onCuePoint = cuePointHandler2;			//oClient2.onMetaData = metaDataHandler;			ns2.client = cuePointHandler2;			ns3.client = cuePointHandler2;			*/									//ns2.client={onMetaData:function(obj:Object):void{} };			//ns3.client={onMetaData:function(obj:Object):void{} };									if(stageVideoAvail)			{				//Because StageVideo allows multiple players, we'll use them. Current config won't play nicely with Mobile Devices!				trace("Has StageVideo");				sv1 = stage.stageVideos[0];				sv2 = stage.stageVideos[1];				sv3 = stage.stageVideos[2];								sv1.addEventListener(StageVideoEvent.RENDER_STATE, OnRender);				sv2.addEventListener(StageVideoEvent.RENDER_STATE, OnRender);				sv3.addEventListener(StageVideoEvent.RENDER_STATE, OnRender);								sv1.attachNetStream(ns1);				sv2.attachNetStream(ns2);				sv3.attachNetStream(ns3);											}			else			{				//Oh snap. Hopefully, we'll never need to use these for every video setup. Hardware acceleration is so much cooler!				trace("Does NOT have StageVideo");				vid1 = new Video(iStageWidth, iStageHeight);				vid2 = new Video(iStageWidth, iStageHeight);				vid3 = new Video(iStageWidth, iStageHeight);								addChild(vid1);				addChild(vid2);				addChild(vid3);								vid1.attachNetStream(ns1);				vid2.attachNetStream(ns2);				vid3.attachNetStream(ns3);			}			addEventListener(Event.ENTER_FRAME, CurrentFrameListener);			//Pre-buffer 3 seconds so we won't have to wait for the video.						bCueingVideo1 = true;						ns1.bufferTime = 15;			ns1.play(sFile1);			bRestarting = false;		}				//These 2 functions need to be in the code, but currently do nothing other than being here!		public function metaDataHandler(e:Object) :void		{			if(bCueingVideo1)			{				iFilmDuration = e.duration;			}					}				public function onMetaData(e:Object) :void		{					}		public function onXMPData(e:Object) :void		{					}				private function ShowMouse(bShow:Boolean) :void		{			if(bShow)			{				Mouse.show();			}			else			{				//Mouse.hide();				//Hide the cursor after a second				timer.start();			}		}				private function HideMouseAfterWait(e:TimerEvent) :void		{			if (timer.currentCount == iSecondsToWait)			{				timer.stop();				timer.reset();								Mouse.hide();			}		}				private function Quality() :String		{			return sCurrentQuality + sFileExtension;		}				public function asyncErrorHandler(event:AsyncErrorEvent):void {			trace(event.text);		}				private function OnRender(e:StageVideoEvent) :void		{			//Set up the StageVideo sizes for non-fullscreen size.			sv1.viewPort = new Rectangle(0, 0, iStageWidth, iStageHeight);			sv2.viewPort = new Rectangle(0, 0, iStageWidth, iStageHeight);			sv3.viewPort = new Rectangle(0, 0, iStageWidth, iStageHeight);					}				private function CurrentFrameListener(event:Event):void 		{			var iDelay:Number;			if(bFS)			{				if(iCurrentVideoPlaying == 1)				{					var iCurrentSeconds:Number = ns1.time;										if(!isNaN(iFilmDuration))					{						switch(iStage)						{							case 1:								iDelay = 2.25;								break;							case 3:								iDelay = 2;								break;							case 5:								iDelay = 1;								break;							default:								iDelay = 2.25;								break;																				}												if(iCurrentSeconds > (iFilmDuration - iDelay))						{							if(iStage <= iNoOfStages)							{								ns1.pause();								//If we need to use buttons, lets show them. Later, we'll be using arrays of buttons to allow flexibility!								Tweener.addTween(fadeScreen, {alpha:iFadeAlpha, time:1, transition:"easeOutExpo"});								//fadeScreen.alpha = iFadeAlpha;								btnButton1.alpha = 1;								btnButton2.alpha = 1;																fadeScreen.x = 0								btnButton1.x = 50;								btnButton2.x = 200;																var asButtonStrings:Array = [];								var i:int;								var j:int;								var sButtonTitle:String;								for (i=0; i < xml.iMovie.Stages.stage.length(); i++)								{									if(xml.iMovie.Stages.stage[i].@stage == iStage)									{										for(j = 0; j < xml.iMovie.Stages.stage[i].Choices.choice.length(); j++)										{											sButtonTitle = xml.iMovie.Stages.stage[i].Choices.choice[j].buttontitle;											asButtonStrings[j] = sButtonTitle;										}										break;									}								}																MakeButtons(asButtonStrings);																//Show the Choose Path label								lblChoosePath.x = iChoosePathX;																bButtonActive = true;																ShowMouse(true);							}							//						else							//						{							//							//Last Video has finished, lets show a button, and make it all start again							//							btnRestart.x = iRestartX;							//							btnRestart.y = iRestartY;							//							bRestarting = true;							//														//														//						}							//Show the mouse						}											}									}							}			//trace(currentSeconds);		}				private function OnStatsVideo1(stats:NetStatusEvent) :void		{			//This is when the video that's playing has stopped			if(stats.info.code == "NetStream.Play.Stop")			{				if(iStage <= iNoOfStages)				{					//If we need to use buttons, lets show them. Later, we'll be using arrays of buttons to allow flexibility!					Tweener.addTween(fadeScreen, {alpha:iFadeAlpha, time:1, transition:"easeOutExpo"});					//fadeScreen.alpha = iFadeAlpha;					btnButton1.alpha = 1;					btnButton2.alpha = 1;										fadeScreen.x = 0					btnButton1.x = 50;					btnButton2.x = 200;										var asButtonStrings:Array = [];					var i:int;					var j:int;					var sButtonTitle:String;					for (i=0; i < xml.iMovie.Stages.stage.length(); i++)					{						if(xml.iMovie.Stages.stage[i].@stage == iStage)						{							for(j = 0; j < xml.iMovie.Stages.stage[i].Choices.choice.length(); j++)							{								sButtonTitle = xml.iMovie.Stages.stage[i].Choices.choice[j].buttontitle;								asButtonStrings[j] = sButtonTitle;							}							break;						}					}										MakeButtons(asButtonStrings);										//Show the Choose Path label					lblChoosePath.x = iChoosePathX;										bButtonActive = true;				}				else				{					//Last Video has finished, lets show a button, and make it all start again					btnRestart.x = iRestartX;					btnRestart.y = iRestartY;					bRestarting = true;														}				//Show the mouse				ShowMouse(true);							}			trace(stats);		}				private function OnStatsVideo2and3(stats:NetStatusEvent) :void		{			//This is when the video that's playing has stopped			if(stats.info.code == "NetStream.Play.Stop")			{				// we only have one video as the next choice, but we can make cool option stuff here later if we have multiple exits!				iSelection = 1;				PlayNextVideo();			}			trace(stats);		}						private function /*OnCuePoint*/cuePointHandler(infoObject:Object):void 		{			var i:int;			if(iCurrentVideoPlaying == 1)			{				switch (infoObject.name)				{					//Ok, so we have a cue point in the video called "PreStream" which leaves us enough time to pre buffer some of the next videos					case "PreStream":												//Because we've made a cool XML file to edit our setup quickly, lets grab the videos we need						for (i=0; i < xml.iMovie.Stages.stage.length(); i++)						{							if(xml.iMovie.Stages.stage[i].@stage == iStage)							{								sFile2 = xml.iMovie.Stages.stage[i].Choices.choice[0].video + Quality();								sFile3 = xml.iMovie.Stages.stage[i].Choices.choice[1].video + Quality();								break;							}						}						bCueingVideo1 = false						//Lets prebuffer 10 seconds of video 2 and pause it for playing later						ns2.play(sFile2);						ns2.bufferTime = 15;						ns2.pause();							//Lets do the same for video 3						ns3.play(sFile3);						ns3.bufferTime = 15;						ns3.pause();																		//ns1.resume();						if(stageVideoAvail)						{							//Set First video to the front, and others behind.							sv1.depth = 240;							sv2.depth = 160;							sv3.depth = 80;						}						else						{							//vid1.prototype.swapdepth						}						//			ns3.bufferTime = 10;						//			ns3.pause();						//trace(cuePoint.name + " Caught " + cuePoint.time);						break;					default:						trace(infoObject.name + " " + infoObject.time);										}			}			else			{				//Video playing must be a subsequent video				switch (infoObject.name)				{					case "PreStream":						for (i=0; i < xml.iMovie.Stages.stage.length(); i++)						{							if(xml.iMovie.Stages.stage[i].@stage == iStage)							{								sFile1 = xml.iMovie.Stages.stage[i].Choices.choice[0].video  + Quality();								break;							}						}						bCueingVideo1 = true;												ns1.play(sFile1);						ns1.bufferTime = 15;						ns1.pause();																								//ns1.resume();						if(stageVideoAvail)						{							//Set First video to the front, and others behind.							if(iSelection == 1)							{																sv1.depth = 160;								sv2.depth = 240;								sv3.depth = 80;							}							else if(iSelection == 2)							{								sv1.depth = 80;								sv2.depth = 160;								sv3.depth = 240;							}							iSelection = 0;						}						else						{							//vid1.prototype.swapdepth						}						//			ns3.bufferTime = 10;						//			ns3.pause();						//trace(cuePoint.name + " Caught " + cuePoint.time);						break;					default:						trace(infoObject.name + " " + infoObject.time);										}			}		}						//EVENTS FOR BUTTON 1		// next we create the functions that will handle our events		private function btnButton1Over(e:MouseEvent):void 		{			// we tween the alpha when user rolls over the button						if(bButtonActive == true)			{				Tweener.addTween(e.target, {alpha:iFadeAlpha, time:1, transition:"easeOutExpo"});			}			else			{				btnButton1.alpha = 0;			}		}				private function btnButton1Out(e:MouseEvent):void 		{			// after roll out the alpha it tweened back to 1						if(bButtonActive == true)			{				Tweener.addTween(e.target, {alpha:1, time:1, transition:"easeOutExpo"});			}			else			{				btnButton1.alpha = 0;			}		}				private function btnButton1Click(e:MouseEvent):void 		{			// after roll out the alpha it tweened back to 1			iSelection = 1;			PlayNextVideo();						//Hide the mouse			ShowMouse(false);		}		//		private function btnResumeYo(e:MouseEvent):void //		{//			SwithchFullScreen();//		}						//EVENTS FOR BUTTON 2		// next we create the functions that will handle our events		private function btnButton2Over(e:MouseEvent):void 		{			// we tween the alpha when user rolls over the button			if(bButtonActive == true)			{				Tweener.addTween(e.target, {alpha:iFadeAlpha, time:1, transition:"easeOutExpo"});			}			else			{				btnButton2.alpha = 0;			}		}				private function btnButton2Out(e:MouseEvent):void 		{			// after roll out the alpha it tweened back to 1						if(bButtonActive == true)			{				Tweener.addTween(e.target, {alpha:1, time:1, transition:"easeOutExpo"});			}			else			{				btnButton2.alpha = 0;			}		}				private function btnButton2Click(e:MouseEvent):void 		{			// when user clicks we will redirect him to my profile on ActiveDen website			iSelection = 2;			PlayNextVideo();						//Hide the mouse			ShowMouse(false);		}				//EVENTS FOR RESUME BUTTON		// next we create the functions that will handle our events		private function btnResumeOver(e:MouseEvent):void 		{			// we tween the alpha when user rolls over the button//			if(bButtonActive == true)//			{				Tweener.addTween(e.target, {alpha:iFadeAlpha, time:1, transition:"easeOutExpo"});//			}//			else//			{//				btnResume.alpha = 0;//			}		}				private function btnResumeOut(e:MouseEvent):void 		{			// after roll out the alpha it tweened back to 1			//			if(bButtonActive == true)//			{				Tweener.addTween(e.target, {alpha:1, time:1, transition:"easeOutExpo"});//			}//			else//			{//				btnResume.alpha = 0;//			}		}				private function btnResumeClick(e:MouseEvent):void 		{			// when user clicks we will redirect him to my profile on ActiveDen website			SwitchFullScreen();						//Read the XML Config file				if(bXMLLoaded == false)			{								//btnResume.graphics.clear();				xml = new XML("<data/>");				ReadXML(xmlFile);				}			else			{				if(bButtonActive == false)				{					switch(iCurrentVideoPlaying)					{						case 1:							ns1.togglePause();							break;						case 2:							ns2.togglePause();							break;						case 3:							ns3.togglePause();							break;					}									}				else				{					btnButton1.x = iButton1Location;					btnButton2.x = iButton2Location;					lblChoosePath.x = iChoosePathLocation;				}											}			fadeScreen.alpha = 0;			fadeScreen.x = stage.width;			btnResume.x = stage.width;			btnRestartDFScreen.x = stage.width;						//Hide the mouse			ShowMouse(false);		}								//EVENTS FOR RESTART BUTTON		// next we create the functions that will handle our events		private function btnRestartOver(e:MouseEvent):void 		{			// we tween the alpha when user rolls over the button			//			if(bButtonActive == true)			//			{			Tweener.addTween(e.target, {alpha:iFadeAlpha, time:1, transition:"easeOutExpo"});			//			}			//			else			//			{			//				btnResume.alpha = 0;			//			}		}				private function btnRestartOut(e:MouseEvent):void 		{			// after roll out the alpha it tweened back to 1						//			if(bButtonActive == true)			//			{			Tweener.addTween(e.target, {alpha:1, time:1, transition:"easeOutExpo"});			//			}			//			else			//			{			//				btnResume.alpha = 0;			//			}		}				private function btnRestartClick(e:MouseEvent):void 		{			bRestarting = true;			ns1.close();			ns2.close();			ns3.close();						if (stage.displayState == StageDisplayState.NORMAL)			{				//No, lets do it!				stage.displayState=StageDisplayState.FULL_SCREEN;							} 						iStage = 1;			ReadXML(xmlFile);						//Hide the mouse			ShowMouse(false);			}				private function PlayNextVideo():void		{			//var bRestarting:Boolean = false;			//Has a selection been made?			if(iSelection > 0 && iStage <= iNoOfStages)			{				//Which stage of interaction are we at throughout the video?				switch(iStage)				{					case 1:						if(iSelection == 1)						{							//Start Playing video 2							ns2.togglePause();														//Set Current Video Playing							iCurrentVideoPlaying = 2;														//Clean up other videos							ns1.close();							ns3.close();													}						else						{							//Start Playing video 3							ns3.togglePause();														//Set Current Video Playing							iCurrentVideoPlaying = 3;														//Clean up other videos							ns1.close();							ns2.close();													}												break;					case 2:						if(iSelection == 1)						{							//Start Playing video 1							ns1.togglePause();														//Set Current Video Playing							iCurrentVideoPlaying = 1;														//Clean up other videos							ns2.close();							ns3.close();													}						break;					case 3:						if(iSelection == 1)						{							//Start Playing video 2							ns2.togglePause();														//Set Current Video Playing							iCurrentVideoPlaying = 2;														//Clean up other videos							ns1.close();							ns3.close();													}						else						{							//Start Playing video 3							ns3.togglePause();														//Set Current Video Playing							iCurrentVideoPlaying = 3;														//Clean up other videos							ns1.close();							ns2.close();													}												break;					case 4:						if(iSelection == 1)						{							//Start Playing video 1							ns1.togglePause();														//Set Current Video Playing							iCurrentVideoPlaying = 1;														//Clean up other videos							ns2.close();							ns3.close();													}						break;					case 5:						if(iSelection == 1)						{							//Start Playing video 2							ns2.togglePause();														//Set Current Video Playing							iCurrentVideoPlaying = 2;														//Clean up other videos							ns1.close();							ns3.close();													}						else						{							//Start Playing video 3							ns3.togglePause();														//Set Current Video Playing							iCurrentVideoPlaying = 3;														//Clean up other videos							ns1.close();							ns2.close();													}												break;					case 6:						if(iSelection == 1)						{							//Start Playing video 1							ns1.togglePause();														//Set Current Video Playing							iCurrentVideoPlaying = 1;														//Clean up other videos							ns2.close();							ns3.close();													}						break;				}			}			else			{				//Is this where the restart button should go?								//SwitchFullScreen();				bRestarting = true;				ReadXML(xmlFile);				}						fadeScreen.alpha = 0;			btnButton1.alpha = 0;			btnButton2.alpha = 0;						fadeScreen.x = stage.width;			btnButton1.x = stage.width;			btnButton2.x = stage.width;						//Hide Choose Path label			lblChoosePath.x = stage.width;						bButtonActive = false;						//iSelection = 0;						iStage = iStage + 1;								}				private function ReadXML(xmlFile:String):void 		{			// load the xml file using the URLLoader class			var loader:URLLoader = new URLLoader(new URLRequest(xmlFile))			// call our xmlLoaded function once the xml has loaded			loader.addEventListener(Event.COMPLETE, XMLLoaded);		}		private function XMLLoaded(e:Event):void 		{			// assign loaded xml structure to our xml object			xml = new XML(e.target.data);			xml.ignoreWhitespace=true;									sHighQuality = xml.iMovie.Qualities.High.label;			sMediumQuality = xml.iMovie.Qualities.Medium.label;			sFileExtension = xml.iMovie.Qualities.fileextension;						sCurrentQuality = xml.iMovie.Qualities.defaultquality;						//Get the filename of the first video			sFile1 = xml.iMovie.Stages.initial.video + Quality();						//Hide the Restart button			btnRestart.x = stage.width;			btnRestartDFScreen.x = stage.width;			if(bRestarting)			{				btnResume.x = stage.width;			}						iStage = 1;			//Set the first video playing			iCurrentVideoPlaying = 1; 						//We need to know how many stages of change the video has in total so we know when to end!			iNoOfStages = int(xml.iMovie.NoOfStages);						//We add an event to allow us to monitor whether StageVideo is available			stage.addEventListener(StageVideoAvailabilityEvent.STAGE_VIDEO_AVAILABILITY, OnAvail);						bXMLLoaded = true;		}				private function MakeButtons(array:Array):void		{			if(array.length > 0)			{				//btnButton1.removeChild(oTextField);				//btnButton2.removeChild(oTextField);				//Set up the max width of each button				var iButtonCount:int = array.length;				var iMaxButtonSpace:int = iStageWidth / iButtonCount;				var iUseableButtonWidth:int = iStageWidth / iButtonCount;				var iButtonWidthAbsolute:int;				var bUseBWAbsolute:Boolean = true;								//once we have the number of buttons we can play with the button sizes. Lets find the largest button				var iTallestButton:int;				var iVerticalPadding:int;								var i:int;								if(sFontName == "Verdana")				{					iVerticalPadding = 5;				}				else				{					iVerticalPadding = 1;				}								//Clear buttons (Make dynamic later)				btnButton1.graphics.clear();				btnButton2.graphics.clear();								if(btnButton1.contains(oBitmap1))				{					btnButton1.removeChild(oBitmap1);				}								if(btnButton2.contains(oBitmap2))				{					btnButton2.removeChild(oBitmap2);				}								//Get maximum button height				for(i = 0; i < iButtonCount; i++)				{					array[i] = MakeMultilineText(array[i], iUseableButtonWidth);					oTextField.text = array[i];										if(oTextField.textHeight > iTallestButton)					{						iTallestButton = oTextField.textHeight + iVerticalPadding;					}										if(oTextField.textWidth < iUseableButtonWidth)					{						if(oTextField.textWidth > iButtonWidthAbsolute)						{							iButtonWidthAbsolute = oTextField.textWidth + 5;						}					}					else					{						//We should never hit this point, as the Button Text should be multilined on ' ' to make it narrower than the iButtonWidth						bUseBWAbsolute = false;					}									}								if(bUseBWAbsolute)				{					iUseableButtonWidth = iButtonWidthAbsolute;				}								oTextField.height = iTallestButton + 6;				oTextField.width = iUseableButtonWidth + 6;				//oTextField.border = true;				oTextField.borderColor = 0x00000000;				//var oTextFormat:TextFormat = new TextFormat(								var oBitmap:BitmapData;				var oBitmapArray:Array = [];								for(i = 0; i < iButtonCount; i++)				{					oTextField.text = array[i];										oBitmap = new BitmapData(iUseableButtonWidth + 6, iTallestButton, true, 0x000000ff);					oBitmap.draw(oTextField, null, null, null, null, true);										//mySprite.addChild(new Bitmap(myTextImage));										//stage.addChild(mySprite);					oBitmapArray[i] = oBitmap;				}				//Later we'll change the below to allow for more than 2 buttons								oBitmap1 = new Bitmap(oBitmapArray[0]);				oBitmap2 = new Bitmap(oBitmapArray[1]);								oBitmap1.smoothing = true;				oBitmap2.smoothing = true;								btnButton1.addChild(oBitmap1);				btnButton2.addChild(oBitmap2);												btnButton1.graphics.beginFill(uiButtonColour);				btnButton1.graphics.drawRoundRect(0, 0, btnButton1.width, btnButton1.height, 3);				btnButton1.graphics.endFill();								btnButton1.graphics.beginFill(0x00000000);				btnButton1.graphics.drawRoundRect(1, 1, btnButton1.width - 2, btnButton1.height - 2, 3);				btnButton1.graphics.endFill();								btnButton2.graphics.beginFill(uiButtonColour);				btnButton2.graphics.drawRoundRect(0, 0, btnButton2.width, btnButton2.height, 3);				btnButton2.graphics.endFill();								btnButton2.graphics.beginFill(0x00000000);				btnButton2.graphics.drawRoundRect(1, 1, btnButton2.width - 2, btnButton2.height - 2, 3);				btnButton2.graphics.endFill();								//Experimental				btnButton1.x = int((iMaxButtonSpace / 2) - (btnButton1.width / 2));				btnButton1.y = int((iStageHeight / 2) - (btnButton1.height / 2));								btnButton2.x = int((iStageWidth -(iMaxButtonSpace / 2)) - (btnButton2.width / 2));				btnButton2.y = int((iStageHeight / 2) - (btnButton2.height / 2));							}			//iButtonCount is 2 for the preliminary film		}				private function MakeResumeOrRestart(sButtonTitle:String, sButtonShortName:String):void		{			if(sButtonTitle != "")			{				//Are we making a resume or a restart button//				var bMakingResume:Boolean;//				if(sResumeOrRestart == "Resume")//				{//					//We are making the resume button//					bMakingResume = true;//				}//				else//				{//					//We are making the restart button//					bMakingResume = false;//				}								sButtonTitle = sButtonTitle + " ";				//btnButton1.removeChild(oTextField);				//btnButton2.removeChild(oTextField);				//Set up the max width of each button				var iMaxButtonSpace:int = iStageWidth;				var iUseableButtonWidth:int = iStageWidth;				var iButtonWidthAbsolute:int;				var bUseBWAbsolute:Boolean = true;				var iVerticalPadding:int;								//once we have the number of buttons we can play with the button sizes. Lets find the largest button				var iTallestButton:int;								var i:int;								if(sFontName == "Verdana")				{					iVerticalPadding = 5;				}				else				{					iVerticalPadding = 1;				}								//Get maximum button height				sButtonTitle = MakeMultilineText(sButtonTitle, iUseableButtonWidth);				oTextField.text = sButtonTitle;				//oTextField.border = true;				//oTextField.borderColor = 0x00000000;								if(oTextField.textHeight > iTallestButton)				{					iTallestButton = oTextField.textHeight + iVerticalPadding;				}								if(oTextField.textWidth < iUseableButtonWidth)				{					if(oTextField.textWidth > iButtonWidthAbsolute)					{						iButtonWidthAbsolute = oTextField.textWidth + 5;					}				}				else				{					//We should never hit this point, as the Button Text should be multilined on ' ' to make it narrower than the iButtonWidth					bUseBWAbsolute = false;				}													if(bUseBWAbsolute)				{					iUseableButtonWidth = iButtonWidthAbsolute;				}								oTextField.height = iTallestButton + 3;				oTextField.width = iUseableButtonWidth + 3;				//var oTextFormat:TextFormat = new TextFormat(				//				if(bMakingResume)//				{//					//ClearResumeGraphic//				}//				else//				{//					//ClearRestartGraphic//				}								var oBitmap:Bitmap;				var oBitmapData:BitmapData;								oTextField.text = sButtonTitle;				oBitmapData = new BitmapData(iUseableButtonWidth + 3, iTallestButton, true, 0x000000ff);				oBitmapData.draw(oTextField, null, null, null, null, true);				//Later we'll change the below to allow for more than 2 buttons								oBitmap = new Bitmap(oBitmapData);								oBitmap.smoothing = true;								switch(sButtonShortName)				{					case sResumeShort:						btnResume.graphics.clear();						//MAKE THE RESUME BUTTON						btnResume.addChild(oBitmap);												//btnResume.graphics.lineStyle(2);						btnResume.graphics.beginFill(uiButtonColour);						btnResume.graphics.drawRoundRect(0, 0, btnResume.width, btnResume.height, 4);						btnResume.graphics.endFill();												btnResume.graphics.beginFill(0x00000000);						btnResume.graphics.drawRoundRect(1, 1, btnResume.width - 2, btnResume.height - 2, 4);						btnResume.graphics.endFill();												//Experimental						btnResume.x = int((iMaxButtonSpace / 2) - (btnResume.width / 2));						btnResume.y = int((iStageHeight / 2) - (btnResume.height / 2));						break;										case sRestartShort:						btnRestart.graphics.clear();						//MAKE THE RESTART BUTTON						btnRestart.addChild(oBitmap);												//btnRestart.graphics.lineStyle(2);						btnRestart.graphics.beginFill(uiButtonColour);						btnRestart.graphics.drawRoundRect(0, 0, btnRestart.width, btnRestart.height, 4);						btnRestart.graphics.endFill();												btnRestart.graphics.beginFill(0x00000000);						btnRestart.graphics.drawRoundRect(1, 1, btnRestart.width - 2, btnRestart.height - 2, 4);						btnRestart.graphics.endFill();												//Experimental						btnRestart.x = int((iMaxButtonSpace / 2) - (btnRestart.width / 2));						btnRestart.y = int((iStageHeight / 2) - (btnRestart.height / 2));						break;										case sRestartDFSShort:						btnRestartDFScreen.graphics.clear();						//MAKE THE RESTART BUTTON						btnRestartDFScreen.addChild(oBitmap);												//btnRestart.graphics.lineStyle(2);						btnRestartDFScreen.graphics.beginFill(uiButtonColour);						btnRestartDFScreen.graphics.drawRoundRect(0, 0, btnRestartDFScreen.width, btnRestartDFScreen.height, 4);						btnRestartDFScreen.graphics.endFill();												btnRestartDFScreen.graphics.beginFill(0x00000000);						btnRestartDFScreen.graphics.drawRoundRect(1, 1, btnRestartDFScreen.width - 2, btnRestartDFScreen.height - 2, 4);						btnRestartDFScreen.graphics.endFill();												//Experimental						btnRestartDFScreen.x = int((iMaxButtonSpace / 2) - (btnRestartDFScreen.width / 2));						btnRestartDFScreen.y = int(((iStageHeight / 2) - (btnRestartDFScreen.height / 2)) + (btnResume.height + 20));						break;					case sChoosePathShort:						lblChoosePath.addChild(oBitmap);						lblChoosePath.x = int((iMaxButtonSpace / 2) - (lblChoosePath.width / 2));						lblChoosePath.y = 120;						break;				}				//				if(bMakingResume)//				{//					btnResume.graphics.clear();//					//MAKE THE RESUME BUTTON//					btnResume.addChild(oBitmap);//					//					//btnResume.graphics.lineStyle(2);//					btnResume.graphics.beginFill(uiButtonColour);//					btnResume.graphics.drawRoundRect(0, 0, btnResume.width, btnResume.height, 4);//					btnResume.graphics.endFill();//					//					btnResume.graphics.beginFill(0x00000000);//					btnResume.graphics.drawRoundRect(2, 2, btnResume.width - 4, btnResume.height - 4, 4);//					btnResume.graphics.endFill();//					//					//Experimental//					btnResume.x = int((iMaxButtonSpace / 2) - (btnResume.width / 2));//					btnResume.y = int((iStageHeight / 2) - (btnResume.height / 2));//				}//				else//				{//					btnRestart.graphics.clear();//					//MAKE THE RESTART BUTTON//					btnRestart.addChild(oBitmap);//					//					//btnRestart.graphics.lineStyle(2);//					btnRestart.graphics.beginFill(uiButtonColour);//					btnRestart.graphics.drawRoundRect(0, 0, btnRestart.width, btnRestart.height, 4);//					btnRestart.graphics.endFill();//					//					btnRestart.graphics.beginFill(0x00000000);//					btnRestart.graphics.drawRoundRect(2, 2, btnRestart.width - 4, btnRestart.height - 4, 4);//					btnRestart.graphics.endFill();//					//					//Experimental//					btnRestart.x = int((iMaxButtonSpace / 2) - (btnRestart.width / 2));//					btnRestart.y = int((iStageHeight / 2) - (btnRestart.height / 2));//				}							}			//iButtonCount is 2 for the preliminary film		}					private function MakeMultilineText(sString:String, iMaxWidth:int):String		{			//We'll use this to figure out how many pixels wide our button can be			oTextField.text = sString			oTextField.multiline = true;			//oTextField.wordWrap = true;						//We'll use this if we need to break the string on spaces to make it fit in the max button space			var asChars:Array = [];			var iLastSpaceLocation:int;						var i:int = 0;			var iLastSplitPoint:int;			var bSplit:Boolean = false;						var sSplitString:String;			if(oTextField.textWidth > iMaxWidth)			{				asChars = sString.split('');				while(oTextField.textWidth > iMaxWidth)				{										for (i=0; i < asChars.length; i++)					{						if(asChars[i] == '\n')						{							break;						}						if(asChars[i] == ' ')						{							iLastSplitPoint = i;							bSplit = true;						}					}					if(bSplit == true)					{						asChars[iLastSplitPoint] = '\n';												sString = "";						for(i=0; i < asChars.length; i++)						{							sString = sString + asChars[i];						}						oTextField.text = sString;					}					else					{						break;					}				}							}			return sString;		}	}}